diff --git data/calculate-builder data/calculate-builder
index b05fb1f..40a7414 100644
--- data/calculate-builder
+++ data/calculate-builder
@@ -11,6 +11,7 @@ KERNEL_VERSION_CONF="modules_3"
 MODULES_PATH="/lib/modules/${KERNEL_VERSION}"
 CONF_FILE="/etc/conf.d/modules"
 
+# get variable value from cl-install
 variable_value()
 {
 	local varname=$1
@@ -18,10 +19,13 @@ variable_value()
 		awk "{ if (\$1 == \"$varname\") print \$3 }"
 }
 
+# detect modules for cpu freq
 get_cpufreq_modules(){
 	MODULES_STRING=""
+	# find all cpufreq modules 
 	for path in $(find $MODULES_PATH -name cpufreq)
 	do
+		# load each module and chech it
 		for module_path in $(find $path -name *.ko | sort)
 		do
 			module_name=${module_path##\/*\/}
@@ -39,6 +43,7 @@ get_cpufreq_modules(){
 	done
 }
 
+# find cpu freq modules autoload string
 find_string_modules(){
 	find_string=$(awk "/^\s*[^#]*\s*${KERNEL_VERSION_CONF}/ {print}" < ${CONF_FILE})
 	if [[ -n $find_string ]];
@@ -48,14 +53,20 @@ find_string_modules(){
 	return 1
 }
 
+# add cpu freq modules to modules autoload file
 add_autoload_modules(){
+	# get root type
 	local roottype=`variable_value os_root_type`
+	# if modules have not added yet
 	if ! find_string_modules;
 	then
 		ebegin "Added rules for cpu frequency"
+		# detect cpufreq modules
 		get_cpufreq_modules
+		# if root type is hdd
 		if [[ $roottype == "hdd" ]]
 		then
+			# append config string to conf file
 			echo ${KERNEL_VERSION_CONF}=\"${MODULES_STRING}\" >> ${CONF_FILE}
 		fi
 	else
@@ -69,6 +80,7 @@ start() {
 }
 
 stop() {
+	# remove calculate-builder from autorun
 	local roottype=`variable_value os_root_type`
 	if [[ $roottype == "hdd" ]] && rc-config list boot | grep -q calculate-builder
 	then
diff --git pym/cl_builder.py pym/cl_builder.py
index 8070896..34cd1d5 100644
--- pym/cl_builder.py
+++ pym/cl_builder.py
@@ -140,7 +140,7 @@ class cl_builder(color_print):
         #self.clVars.Set("cl_root_path","/", True)
         self.clVars.Set("cl_action","iso", True)
         chrootPath=pathJoin(directory,
-                            self.clVars.Get('cl_builder_squash_path'))
+            self.clVars.Get('cl_builder_squash_path'))
         self.clVars.Set("cl_chroot_path",chrootPath, True)
         self.clVars.Set("cl_root_path","..", True)
         self.clTempl = template(self.clVars)
@@ -254,35 +254,28 @@ class cl_builder(color_print):
                 raise BuilderError(_("Failed to unmount %s")%target)
             self.printByResult(True)
         distrPath = distr.convertToDirectory().getDirectory()
+        self.clVars.Set('cl_builder_squash_path',
+                        os.path.basename(os.path.normpath(distrPath)))
         self.cleanNeedlessKernelData(distrPath)
         self.dispatchConf(distrPath)
 
+        builderPath = self.clVars.Get('cl_builder_path')
         if self.assembleIso and \
             self.clVars.Get('os_builder_profile').endswith('binary'):
-            self.printMessageForTest(_("Updating calculate overlay"))
-            updateLayman = self.runChroot(distrPath,"layman -s calculate")
-            self.printByResult(updateLayman.success())
-
-        self.printByResult(True)
-
-        builderPath = self.clVars.Get('cl_builder_path')
-        updateMeta = False
-        for gitName,gitDir in (('portage','/usr/portage'),
-                       ('overlay','/var/lib/layman/calculate')):
-            gitHead = pathJoin(builderPath,gitDir,".git/HEAD")
-            if "heads/develop" in readFile(gitHead):
-                self.printMessageForTest(
-                    _("Changing {repname} repository branch to '{branch}'").
-                        format(repname=gitName,
-                               branch='master'))
-                changeBranch = self.runChroot(distrPath,
-                    "cd %s;git fetch;git checkout master;git pull"%gitDir)
-                self.printByResult(changeBranch.success())
-                updateMeta = True
-
-        if updateMeta:
-            self.printMessageForTest(_("Updating portage metadata"))
-            updateMeta = self.runChroot(distrPath,"emerge --metadata")
+            for gitName,gitDir in (('portage','/usr/portage'),
+                           ('overlay','/var/lib/layman/calculate')):
+                gitHead = pathJoin(builderPath,gitDir,".git/HEAD")
+                if "heads/develop" in readFile(gitHead):
+                    self.printMessageForTest(
+                        _("Changing {repname} repository branch to '{branch}'").
+                            format(repname=gitName,
+                                   branch='master'))
+                    changeBranch = self.runChroot(distrPath,
+                        "cd %s;git pull;git checkout master;git pull"%gitDir)
+                    self.printByResult(changeBranch.success())
+
+            self.printMessageForTest(_("Updating portage"))
+            updateMeta = self.runChroot(distrPath,"emerge --sync")
             self.printByResult(updateMeta.success())
 
         self.applyTemplatesForSquash(distrPath)
diff --git pym/cl_image_cmd.py pym/cl_image_cmd.py
index deef6c6..2029c03 100644
--- pym/cl_image_cmd.py
+++ pym/cl_image_cmd.py
@@ -55,9 +55,6 @@ CMD_OPTIONS = [{'shortOption':"p",
                             if len(COMPRESS_METHODS)>1
                             else _("only {0}").format(COMPRESS_METHODS[0]))
                },
-               {'longOption':'notree',
-                'help':_("exclude the portage tree from the image")
-               },
                {'longOption':'live',
                 'help':_("use only live templates on startup")
                },
