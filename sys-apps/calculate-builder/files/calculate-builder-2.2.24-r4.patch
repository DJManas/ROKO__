diff --git pym/cl_builder.py pym/cl_builder.py
index 4745b47..bece647 100644
--- pym/cl_builder.py
+++ pym/cl_builder.py
@@ -188,7 +188,11 @@ class cl_builder(color_print):
             envdict.update(os.environ)
             commandLine = ["chroot",chroot,
                                 "/bin/bash","-c",command]
-            chrootCommand = process(*commandLine,stderr=PIPE,
+            if self.clVars.Get('os_builder_arch_machine') != \
+                self.clVars.Get('os_arch_machine') and \
+                self.clVars.Get('os_arch_machine') == 'x86_64':
+                commandLine = ["linux32"]+commandLine
+            chrootCommand = process(*commandLine,stderr=STDOUT,
                                 stdout=PIPE,envdict=envdict)
         except KeyboardInterrupt:
             chrootCommand.kill()
@@ -275,7 +279,6 @@ class cl_builder(color_print):
             os.unlink(curProfileFile)
             os.symlink(newProfile,curProfileFile)
 
-
     def restoreProfile(self):
         """Restore profile"""
         if not self.curProfile:
diff --git pym/cl_fill_builder.py pym/cl_fill_builder.py
index cb6744d..939be17 100644
--- pym/cl_fill_builder.py
+++ pym/cl_fill_builder.py
@@ -121,11 +121,26 @@ class fillVars(object, varsShare):
             shortVer = shortVerSearch.group()
         else:
             return ""
+        # find best config
+        makeProfile = '/etc/make.profile'
+        profileSpec = ''
+        if path.islink(makeProfile):
+            linkTarget = os.readlink('/etc/make.profile')
+            parentDir, profileSpecification = path.split(linkTarget)
+            if parentDir.endswith('x86') or parentDir.endswith('amd64'):
+                profileSpec = profileSpecification
         configName = "config-%(system)s-%(march)s-%(ver)s" % \
                 {'system':self.Get('os_linux_system'),
                  'march':self.Get('os_arch_machine'),
                  'ver':shortVer}
-        if path.exists(path.join(kernelDirs,configName)):
+        configNameSpec = "config-%(system)s-%(march)s-%(ver)s-%(spec)s" % \
+                {'system':self.Get('os_linux_system'),
+                 'march':self.Get('os_arch_machine'),
+                 'ver':shortVer,
+                 'spec':profileSpec}
+        if profileSpec and path.exists(path.join(kernelDirs,configNameSpec)):
+            return path.join(kernelDirs,configNameSpec)
+        elif path.exists(path.join(kernelDirs,configName)):
             return path.join(kernelDirs,configName)
         return ""
 
@@ -328,7 +343,7 @@ class fillVars(object, varsShare):
         """
         oldSquash = self.Get('cl_builder_old_squash')
         reOldSquash = Distributive.reLive.search(oldSquash)
-        if reOldSquash:
+        if self.Get('ac_builder_squash') == 'up' and reOldSquash:
             newNum = self.getSquashNum(reOldSquash)+1
             return "livecd.squashfs.%d"%newNum
         else:
